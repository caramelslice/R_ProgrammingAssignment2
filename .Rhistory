getwd()
setwd("/Users/caramel-slice/Dropbox/data/coursera/RR/RepData_PeerAssessment1")
getwd()
swirl()
library(swirl)
swirl()
bye()
swirl()
flags
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
bye()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unlcass(d2)
unlclass(d2)
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
Sys.time()
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist).
plot(x = cars$speed, y = cars$dist).
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distancepeed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distancepeed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main ="My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, c(10,15))
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
boxplot()
?boxplot
boxplot(mtcars)
boxplot(mtcars, formula = mgp ~ cyl)
boxplot(data = mtcars, formula = mgp ~ cyl)
boxplot(formula = mgp ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
require(ggplot2)
require(dplyr)
library(ggplot2)
getwd()
source("cachematrix.R")
x <- 1:10000
vec<-makeCacheMatrix(x)
load("cachematrix.R")
ls()
lm()
list.files()
getwd()
setwd("/Users/caramel-slice/Dropbox/data/coursera/R_A2_LexicalScoping")
list.files()
source("cachematrix.R")
ls()
vec<-makeCacheMatrix(x)
mx <- solve(x)
x = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
x = matrix(seq1, ncol = 2)
matrix(seq1, ncol = 2)
seq1 <- seq(1:6)
x <- matrix(seq1, 2)
x
mx <- solve(x)
seq1 <- seq(1:9)
x <- matrix(seq1, 3)
x
mx <- solve(x)
y <- solve(x)
a <- matrix(c(2,3,5,7,11,13,17,19,23),3,3)
b <- solve(a)
a
a * b
makeCacheMatrix(x)
makeCacheMatrix(a)
source("cachematrix.R")
a <- matrix(c(2,3,5,7,11,13,17,19,23),3,3)
b <- solve(a)
a * b
makeCacheMatrix(x)
makeCacheMatrix(a)
cacheSolve(a)
cacheSolve(b)
a <- matrix(c(2,3,5,7,11,13,17,19,23),3,3)
mat <- makeCacheMatrix(a)
mat$getinverse()
sm <- solve(a)
sm$getinverse
sm
sm <- solve(a)
sm$getinverse
source("cachematrix.R")
sm$getinverse
a <- matrix(c(2,3,5,7,11,13,17,19,23),3,3)
mat <- makeCacheMatrix(a)
mat$getinverse()
sm <- solve(a)
mat$getinverse()
sm$getinverse
sm["getinverse"]
B = matrix(4:7,nrow=2,ncol=2)
fList <- makeCacheMatrix(B)
cacheSolve(fList,B)
B
cacheSolve(fList,B)
makeCacheMatrix(fList,B)
makeCacheMatrix(B)
x <- matrix(c(4,2,7,6), nrow=2, ncol=2)
y <- makeCacheMatrix(x)
z <- cacheSolve(y, x)
print(z)
z <- cacheSolve(y, x)
print(z)
m = x %*% z
print(m)
y$set(matrix(c(3,2,7,6), nrow=2, ncol=2))
z <- cacheSolve(y, x)
print(z)
m = y$get() %*% z
print(m)
x <- matrix(c(4,2,7,6), nrow=2, ncol=2)
y <- makeCacheMatrix(x)
z <- cacheSolve(y, x)
print(z)
z <- cacheSolve(y, x)
print(z)
m = x %*% z
print(m)
y$set(matrix(c(3,2,7,6), nrow=2, ncol=2))
z <- cacheSolve(y, x)
print(z)
m = y$get() %*% z
print(m)
source("cachematrix.R")
x <- matrix(c(4,2,7,6), nrow=2, ncol=2)
y <- makeCacheMatrix(x)
z <- cacheSolve(y, x)
y <- makeCacheMatrix(x)
source("cachematrix.R")
x <- matrix(c(4,2,7,6), nrow=2, ncol=2)
y <- makeCacheMatrix(x)
z <- cacheSolve(y, x)
source("cachematrix.R")
x <- matrix(c(4,2,7,6), nrow=2, ncol=2)
y <- makeCacheMatrix(x)
y <- makeCacheMatrix(x)
source("cachematrix.R")
x <- matrix(c(4,2,7,6), nrow=2, ncol=2)
y <- makeCacheMatrix(x)
z <- cacheSolve(y, x)
print(z)
z <- cacheSolve(y, x)
print(z)
m = x %*% z
print(m)
y$set(matrix(c(3,2,7,6), nrow=2, ncol=2))
z <- cacheSolve(y, x)
print(z)
m = y$get() %*% z
print(m)
z <- cacheSolve(y, x)
print(z)
z <- cacheSolve(y, x)
source("cachematrix.R")
x <- matrix(c(4,2,7,6), nrow=2, ncol=2)
y <- makeCacheMatrix(x)
z <- cacheSolve(y, x)
z <- cacheSolve(y, x)
print(z)
z <- cacheSolve(y, x)
print(z)
m = x %*% z
print(m)
y$set(matrix(c(3,2,7,6), nrow=2, ncol=2))
z <- cacheSolve(y, x)
print(z)
m = y$get() %*% z
print(m)
